package de.danielrajic.model;

import java.util.Random;
import de.danielrajic.interfaces.LeaguePlayable;

public class MatchLeagueModus implements LeaguePlayable {
	
	protected String homeTeam;
	protected String awayTeam;
	protected int scoreHome;
	protected int scoreAway;
	/**
	 * Constructor that sets the points of both Teams to 0.
	 */
	public MatchLeagueModus(){
		setScoreHome(0);
		setScoreAway(0);
	}
	
	/*
	 * GETTER AND SETTER
	 */

	public String getHomeTeam() {
		return homeTeam;
	}

	public void setHomeTeam(String homeTeam) {
		this.homeTeam = homeTeam;
	}

	public String getAwayTeam() {
		return awayTeam;
	}

	public void setAwayTeam(String awayTeam) {
		this.awayTeam = awayTeam;
	}

	public int getScoreHome() {
		return scoreHome;
	}

	public void setScoreHome(int scoreHome) {
		this.scoreHome = scoreHome;
	}

	public int getScoreAway() {
		return scoreAway;
	}

	public void setScoreAway(int scoreAway) {
		this.scoreAway = scoreAway;
	}
	
	// INSTANZ-METHODEN: 
	
	/**
	 * 
	 * @param p
	 * @param g
	 * @param currentTime
	 * @param t
	 * @return boolean
	 * This method returns true, if a player scores a goal, false else
	 */
	public boolean goalchance(Player p, Goalkeeper g, int currentTime, Team t) {
		boolean goal = !g.saveTheShot(p.shootsGoal());
		System.out.println();
		System.out.println(currentTime + ".Minute: ");
		System.out.println("  Chance für " + t.getName() + "...");
		System.out.println("   " + p.getName() + " zieht ab");
		return goal;
	}
	/**
	 * 
	 * @return String
	 * Method returns the result of the game as a String.
	 */
	public String getResultText(){
		return "Das Freundschaftsspiel endete \n \n" + homeTeam + " - "
				+ awayTeam + "  " + scoreHome + " : " + scoreAway;
	}
	
	public void startGame(Team t1, Team t2){
		this.homeTeam = t1.getName();
		this.awayTeam = t2.getName();
		this.scoreHome = 0;
		this.scoreAway = 0;
		/*
		 * Now the game will be started and all action will be generated by random. 
		 */
		Random r = new Random();
		boolean matchInProcess = true;
		int playingTime = 90 + r.nextInt(5);
		int time = 1;
		int nextAction;
		
		// During the match goalchancen can be created. 
		
		while (matchInProcess) {
			nextAction = r.nextInt(15) + 1;

			// ist das Spiel schon zu Ende?
			if (time + nextAction > playingTime) {
				matchInProcess = false;
				break;
			}
			// An new action happens...
			time = time + nextAction;
			/*
			 * Influence of motivation(15%) and Coachexperience(5%) on Teamstrength
			 */
			float strength_1 = 0.8f * t1.getAverageStrength() + 0.15f
					* t1.getAverageMotivation() + 0.05f
					* t1.getCoach().getExperience();
			float strength_2 = 0.8f * t2.getAverageStrength() + 0.15f
					* t2.getAverageMotivation() + 0.05f
					* t2.getCoach().getExperience();
			
			//randomize choose of a shooter
			int shooter = r.nextInt(10);
			
			// the team, that is better, has the higher probabillity of a shot
			if ((r.nextInt(Math.round(strength_1 + strength_2)) - strength_1) < 0) {
				Player p = t1.getSquad()[shooter];
				if (goalchance(p, t2.getKeeper(), time, t1)) {
					scoreHome++;
					p.addGoal();;
					System.out.println("   TOR!!!!!     " + scoreHome + ":"
							+ scoreAway + " " + p.getName() + "("
							+ p.getGoals() + ")");
				} else
					System.out.println(" " + t2.getKeeper().getName()
							+ " pariert glanzvoll.");

			} else {
				// Away-Team gets Chance
				Player p = t2.getSquad()[shooter];
				if (goalchance(p, t1.getKeeper(), time, t2)) {
					scoreAway++;
					p.addGoal();
					System.out.println("   TOR!!!!!     " + scoreHome + ":"
							+ scoreAway + " " + p.getName() + "("
							+ p.getGoals() + ")");
				} else
					System.out.println(" " + t1.getKeeper().getName()
							+ " pariert glanzvoll.");

			}
		}
		
		
	
	}

}
